webpackJsonp([11],{115:function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(_) {!function (t, e) {\n  "use strict";\n  function i(t) {\n    function e(e) {\n      return i.identifier && e[i.identifier] === t[i.identifier];\n    }var i = this;return this.rows.contains(e) ? !1 : (this.rows.push(t), !0);\n  }function s(e) {\n    var i = this.footer ? this.footer.find(e) : t(),\n        s = this.header ? this.header.find(e) : t();return t.merge(i, s);\n  }function o(e) {\n    return e ? t.extend({}, this.cachedParams, { ctx: e }) : this.cachedParams;\n  }function n() {\n    var e = { current: this.current, rowCount: this.rowCount, sort: this.sortDictionary, searchPhrase: this.searchPhrase },\n        i = this.options.post;return i = t.isFunction(i) ? i() : i, this.options.requestHandler(t.extend(!0, e, i));\n  }function r(e) {\n    return "." + t.trim(e).replace(/\\s+/gm, ".");\n  }function l() {\n    var e = this.options.url;return t.isFunction(e) ? e() : e;\n  }function a() {\n    this.element.trigger("initialize" + j), d.call(this), this.selection = this.options.selection && null != this.identifier, p.call(this), g.call(this), R.call(this), k.call(this), v.call(this), u.call(this), this.element.trigger("initialized" + j);\n  }function c() {\n    this.options.highlightRows;\n  }function h(t) {\n    return t.visible;\n  }function d() {\n    var e = this,\n        i = this.element.find("thead > tr").first(),\n        s = !1;i.children().each(function () {\n      var i = t(this),\n          o = i.data(),\n          n = { id: o.columnId, identifier: null == e.identifier && o.identifier || !1, converter: e.options.converters[o.converter || o.type] || e.options.converters.string, text: i.text(), align: o.align || "left", headerAlign: o.headerAlign || "left", cssClass: o.cssClass || "", headerCssClass: o.headerCssClass || "", formatter: e.options.formatters[o.formatter] || null, order: s || "asc" !== o.order && "desc" !== o.order ? null : o.order, searchable: !(o.searchable === !1), sortable: !(o.sortable === !1), visible: !(o.visible === !1), visibleInSelection: !(o.visibleInSelection === !1), width: t.isNumeric(o.width) ? o.width + "px" : "string" == typeof o.width ? o.width : null };e.columns.push(n), null != n.order && (e.sortDictionary[n.id] = n.order), n.identifier && (e.identifier = n.id, e.converter = n.converter), e.options.multiSort || null === n.order || (s = !0);\n    });\n  }function u() {\n    function i(t) {\n      for (var e, i = new RegExp(o.searchPhrase, o.options.caseSensitive ? "g" : "gi"), s = 0; s < o.columns.length; s++) if (e = o.columns[s], e.searchable && e.visible && e.converter.to(t[e.id]).search(i) > -1) return !0;return !1;\n    }function s(t, e) {\n      o.currentRows = t, f.call(o, e), o.options.keepSelection || (o.selectedRows = []), D.call(o, t), b.call(o), y.call(o), o.element._bgBusyAria(!1).trigger("loaded" + j);\n    }var o = this;if (this.element._bgBusyAria(!0).trigger("load" + j), P.call(this), this.options.ajax) {\n      var r = n.call(this),\n          a = l.call(this);if (null == a || "string" != typeof a || 0 === a.length) throw new Error("Url setting must be a none empty string or a function that returns one.");this.xqr && this.xqr.abort();var c = { url: a, data: r, success: function (e) {\n          o.xqr = null, "string" == typeof e && (e = t.parseJSON(e)), e = o.options.responseHandler(e), o.current = e.current, s(e.rows, e.total);\n        }, error: function (t, e) {\n          o.xqr = null, "abort" !== e && (w.call(o), o.element._bgBusyAria(!1).trigger("loaded" + j));\n        } };c = t.extend(this.options.ajaxSettings, c), this.xqr = t.ajax(c);\n    } else {\n      var h = this.searchPhrase.length > 0 ? this.rows.where(i) : this.rows,\n          d = h.length;-1 !== this.rowCount && (h = h.page(this.current, this.rowCount)), e.setTimeout(function () {\n        s(h, d);\n      }, 10);\n    }\n  }function p() {\n    if (!this.options.ajax) {\n      var e = this,\n          s = this.element.find("tbody > tr");s.each(function () {\n        var s = t(this),\n            o = s.children("td"),\n            n = {};t.each(e.columns, function (t, e) {\n          n[e.id] = e.converter.from(o.eq(t).text());\n        }), i.call(e, n);\n      }), f.call(this, this.rows.length), B.call(this);\n    }\n  }function f(t) {\n    this.total = t, this.totalPages = -1 === this.rowCount ? 1 : Math.ceil(this.total / this.rowCount);\n  }function g() {\n    var e = this.options.templates,\n        i = this.element.parent().hasClass(this.options.css.responsiveTable) ? this.element.parent() : this.element;this.element.addClass(this.options.css.table), 0 === this.element.children("tbody").length && this.element.append(e.body), 1 & this.options.navigation && (this.header = t(e.header.resolve(o.call(this, { id: this.element._bgId() + "-header" }))), i.before(this.header)), 2 & this.options.navigation && (this.footer = t(e.footer.resolve(o.call(this, { id: this.element._bgId() + "-footer" }))), i.after(this.footer));\n  }function v() {\n    if (0 !== this.options.navigation) {\n      var e = this.options.css,\n          i = r(e.actions),\n          n = s.call(this, i);if (n.length > 0) {\n        var l = this,\n            a = this.options.templates,\n            c = t(a.actions.resolve(o.call(this)));if (this.options.ajax) {\n          var h = a.icon.resolve(o.call(this, { iconCss: e.iconRefresh })),\n              d = t(a.actionButton.resolve(o.call(this, { content: h, text: this.options.labels.refresh }))).on("click" + j, function (t) {\n            t.stopPropagation(), l.current = 1, u.call(l);\n          });c.append(d);\n        }C.call(this, c), m.call(this, c), I.call(this, n, c);\n      }\n    }\n  }function m(e) {\n    if (this.options.columnSelection && this.columns.length > 1) {\n      var i = this,\n          s = this.options.css,\n          n = this.options.templates,\n          l = n.icon.resolve(o.call(this, { iconCss: s.iconColumns })),\n          a = t(n.actionDropDown.resolve(o.call(this, { content: l }))),\n          c = r(s.dropDownItem),\n          d = r(s.dropDownItemCheckbox),\n          p = r(s.dropDownMenuItems);t.each(this.columns, function (e, l) {\n        if (l.visibleInSelection) {\n          var f = t(n.actionDropDownCheckboxItem.resolve(o.call(i, { name: l.id, label: l.text, checked: l.visible }))).on("click" + j, c, function (e) {\n            e.stopPropagation();var s = t(this),\n                o = s.find(d);if (!o.prop("disabled")) {\n              l.visible = o.prop("checked");var n = i.columns.where(h).length > 1;s.parents(p).find(c + ":has(" + d + ":checked)")._bgEnableAria(n).find(d)._bgEnableField(n), i.element.find("tbody").empty(), R.call(i), u.call(i);\n            }\n          });a.find(r(s.dropDownMenuItems)).append(f);\n        }\n      }), e.append(a);\n    }\n  }function b() {\n    if (0 !== this.options.navigation) {\n      var e = r(this.options.css.infos),\n          i = s.call(this, e);if (i.length > 0) {\n        var n = this.current * this.rowCount,\n            l = t(this.options.templates.infos.resolve(o.call(this, { end: 0 === this.total || -1 === n || n > this.total ? this.total : n, start: 0 === this.total ? 0 : n - this.rowCount + 1, total: this.total })));I.call(this, i, l);\n      }\n    }\n  }function w() {\n    var t = this.element.children("tbody").first(),\n        e = this.options.templates,\n        i = this.columns.where(h).length;this.selection && (i += 1), t.html(e.noResults.resolve(o.call(this, { columns: i })));\n  }function y() {\n    if (0 !== this.options.navigation) {\n      var e = r(this.options.css.pagination),\n          i = s.call(this, e)._bgShowAria(-1 !== this.rowCount);if (-1 !== this.rowCount && i.length > 0) {\n        var n = this.options.templates,\n            l = this.current,\n            a = this.totalPages,\n            c = t(n.pagination.resolve(o.call(this))),\n            h = a - l,\n            d = -1 * (this.options.padding - l),\n            u = h >= this.options.padding ? Math.max(d, 1) : Math.max(d - this.options.padding + h, 1),\n            p = 2 * this.options.padding + 1,\n            f = a >= p ? p : a;x.call(this, c, "first", "<i class=\'zmdi zmdi-more-horiz\'></i>", "first")._bgEnableAria(l > 1), x.call(this, c, "prev", "<i class=\'zmdi zmdi-chevron-left\'></i>", "prev")._bgEnableAria(l > 1);for (var g = 0; f > g; g++) {\n          var v = g + u;x.call(this, c, v, v, "page-" + v)._bgEnableAria()._bgSelectAria(v === l);\n        }0 === f && x.call(this, c, 1, 1, "page-1")._bgEnableAria(!1)._bgSelectAria(), x.call(this, c, "next", "<i class=\'zmdi zmdi-chevron-right\'></i>", "next")._bgEnableAria(a > l), x.call(this, c, "last", "<i class=\'zmdi zmdi-more-horiz\'></i>", "last")._bgEnableAria(a > l), I.call(this, i, c);\n      }\n    }\n  }function x(e, i, s, n) {\n    var l = this,\n        a = this.options.templates,\n        c = this.options.css,\n        h = o.call(this, { css: n, text: s, page: i }),\n        d = t(a.paginationItem.resolve(h)).on("click" + j, r(c.paginationButton), function (e) {\n      e.stopPropagation(), e.preventDefault();var i = t(this),\n          s = i.parent();if (!s.hasClass("active") && !s.hasClass("disabled")) {\n        var o = { first: 1, prev: l.current - 1, next: l.current + 1, last: l.totalPages },\n            n = i.data("page");l.current = o[n] || n, u.call(l);\n      }i.trigger("blur");\n    });return e.append(d), d;\n  }function C(e) {\n    function i(t) {\n      return -1 === t ? s.options.labels.all : t;\n    }var s = this,\n        n = this.options.rowCount;if (t.isArray(n)) {\n      var l = this.options.css,\n          a = this.options.templates,\n          c = t(a.actionDropDown.resolve(o.call(this, { content: i(this.rowCount) }))),\n          h = r(l.dropDownMenu),\n          d = r(l.dropDownMenuText),\n          p = r(l.dropDownMenuItems),\n          f = r(l.dropDownItemButton);t.each(n, function (e, n) {\n        var r = t(a.actionDropDownItem.resolve(o.call(s, { text: i(n), action: n })))._bgSelectAria(n === s.rowCount).on("click" + j, f, function (e) {\n          e.preventDefault();var o = t(this),\n              n = o.data("action");n !== s.rowCount && (s.current = 1, s.rowCount = n, o.parents(p).children().each(function () {\n            var e = t(this),\n                i = e.find(f).data("action");e._bgSelectAria(i === n);\n          }), o.parents(h).find(d).text(i(n)), u.call(s));\n        });c.find(p).append(r);\n      }), e.append(c);\n    }\n  }function D(e) {\n    if (e.length > 0) {\n      var i = this,\n          s = this.options.css,\n          n = this.options.templates,\n          l = this.element.children("tbody").first(),\n          a = !0,\n          c = "";t.each(e, function (e, r) {\n        var l = "",\n            h = \' data-row-id="\' + (null == i.identifier ? e : r[i.identifier]) + \'"\',\n            d = "";if (i.selection) {\n          var u = -1 !== t.inArray(r[i.identifier], i.selectedRows),\n              p = n.select.resolve(o.call(i, { type: "checkbox", value: r[i.identifier], checked: u }));l += n.cell.resolve(o.call(i, { content: p, css: s.selectCell })), a = a && u, u && (d += s.selected, h += \' aria-selected="true"\');\n        }var f = null != r.status && i.options.statusMapping[r.status];f && (d += f), t.each(i.columns, function (e, a) {\n          if (a.visible) {\n            var c = t.isFunction(a.formatter) ? a.formatter.call(i, a, r) : a.converter.to(r[a.id]),\n                h = a.cssClass.length > 0 ? " " + a.cssClass : "";l += n.cell.resolve(o.call(i, { content: null == c || "" === c ? "&nbsp;" : c, css: ("right" === a.align ? s.right : "center" === a.align ? s.center : s.left) + h, style: null == a.width ? "" : "width:" + a.width + ";" }));\n          }\n        }), d.length > 0 && (h += \' class="\' + d + \'"\'), c += n.row.resolve(o.call(i, { attr: h, cells: l }));\n      }), i.element.find("thead " + r(i.options.css.selectBox)).prop("checked", a), l.html(c), A.call(this, l);\n    } else w.call(this);\n  }function A(e) {\n    var i = this,\n        s = r(this.options.css.selectBox);this.selection && e.off("click" + j, s).on("click" + j, s, function (e) {\n      e.stopPropagation();var s = t(this),\n          o = i.converter.from(s.val());s.prop("checked") ? i.select([o]) : i.deselect([o]);\n    }), e.off("click" + j, "> tr").on("click" + j, "> tr", function (e) {\n      e.stopPropagation();var s = t(this),\n          o = null == i.identifier ? s.data("row-id") : i.converter.from(s.data("row-id") + ""),\n          n = null == i.identifier ? i.currentRows[o] : i.currentRows.first(function (t) {\n        return t[i.identifier] === o;\n      });i.selection && i.options.rowSelect && (s.hasClass(i.options.css.selected) ? i.deselect([o]) : i.select([o])), i.element.trigger("click" + j, [i.columns, n]);\n    });\n  }function k() {\n    if (0 !== this.options.navigation) {\n      var i = this.options.css,\n          n = r(i.search),\n          l = s.call(this, n);if (l.length > 0) {\n        var a = this,\n            c = this.options.templates,\n            h = null,\n            d = "",\n            u = r(i.searchField),\n            p = t(c.search.resolve(o.call(this))),\n            f = p.is(u) ? p : p.find(u);f.on("keyup" + j, function (i) {\n          i.stopPropagation();var s = t(this).val();(d !== s || 13 === i.which && "" !== s) && (d = s, (13 === i.which || 0 === s.length || s.length >= a.options.searchSettings.characters) && (e.clearTimeout(h), h = e.setTimeout(function () {\n            S.call(a, s);\n          }, a.options.searchSettings.delay)));\n        }), I.call(this, l, p);\n      }\n    }\n  }function S(t) {\n    this.searchPhrase !== t && (this.current = 1, this.searchPhrase = t, u.call(this));\n  }function R() {\n    var e = this,\n        i = this.element.find("thead > tr"),\n        s = this.options.css,\n        n = this.options.templates,\n        l = "",\n        a = this.options.sorting;if (this.selection) {\n      var c = this.options.multiSelect ? n.select.resolve(o.call(e, { type: "checkbox", value: "all" })) : "";l += n.rawHeaderCell.resolve(o.call(e, { content: c, css: s.selectCell }));\n    }if (t.each(this.columns, function (t, i) {\n      if (i.visible) {\n        var r = e.sortDictionary[i.id],\n            c = a && r && "asc" === r ? s.iconUp : a && r && "desc" === r ? s.iconDown : "",\n            h = n.icon.resolve(o.call(e, { iconCss: c })),\n            d = i.headerAlign,\n            u = i.headerCssClass.length > 0 ? " " + i.headerCssClass : "";l += n.headerCell.resolve(o.call(e, { column: i, icon: h, sortable: a && i.sortable && s.sortable || "", css: ("right" === d ? s.right : "center" === d ? s.center : s.left) + u, style: null == i.width ? "" : "width:" + i.width + ";" }));\n      }\n    }), i.html(l), a) {\n      var h = r(s.sortable);i.off("click" + j, h).on("click" + j, h, function (i) {\n        i.preventDefault(), _.call(e, t(this)), B.call(e), u.call(e);\n      });\n    }if (this.selection && this.options.multiSelect) {\n      var d = r(s.selectBox);i.off("click" + j, d).on("click" + j, d, function (i) {\n        i.stopPropagation(), t(this).prop("checked") ? e.select() : e.deselect();\n      });\n    }\n  }function _(t) {\n    var e = this.options.css,\n        i = r(e.icon),\n        s = t.data("column-id") || t.parents("th").first().data("column-id"),\n        o = this.sortDictionary[s],\n        n = t.find(i);if (this.options.multiSort || (t.parents("tr").first().find(i).removeClass(e.iconDown + " " + e.iconUp), this.sortDictionary = {}), o && "asc" === o) this.sortDictionary[s] = "desc", n.removeClass(e.iconUp).addClass(e.iconDown);else if (o && "desc" === o) {\n      if (this.options.multiSort) {\n        var l = {};for (var a in this.sortDictionary) a !== s && (l[a] = this.sortDictionary[a]);this.sortDictionary = l, n.removeClass(e.iconDown);\n      } else this.sortDictionary[s] = "asc", n.removeClass(e.iconDown).addClass(e.iconUp);\n    } else this.sortDictionary[s] = "asc", n.addClass(e.iconUp);\n  }function I(e, i) {\n    e.each(function (e, s) {\n      t(s).before(i.clone(!0)).remove();\n    });\n  }function P() {\n    var t = this;e.setTimeout(function () {\n      if ("true" === t.element._bgAria("busy")) {\n        var e = t.options.templates,\n            i = t.element.children("thead").first(),\n            s = t.element.children("tbody").first(),\n            n = s.find("tr > td").first(),\n            r = t.element.height() - i.height() - (n.height() + 20),\n            l = t.columns.where(h).length;t.selection && (l += 1), s.html(e.loading.resolve(o.call(t, { columns: l }))), -1 !== t.rowCount && r > 0 && s.find("tr > td").css("padding", "20px 0 " + r + "px");\n      }\n    }, 250);\n  }function B() {\n    function t(i, s, o) {\n      function n(t) {\n        return "asc" === l.order ? t : -1 * t;\n      }o = o || 0;var r = o + 1,\n          l = e[o];return i[l.id] > s[l.id] ? n(1) : i[l.id] < s[l.id] ? n(-1) : e.length > r ? t(i, s, r) : 0;\n    }var e = [];if (!this.options.ajax) {\n      for (var i in this.sortDictionary) (this.options.multiSort || 0 === e.length) && e.push({ id: i, order: this.sortDictionary[i] });e.length > 0 && this.rows.sort(t);\n    }\n  }var j = ".rs.jquery.bootgrid",\n      M = function (e, i) {\n    this.element = t(e), this.origin = this.element.clone(), this.options = t.extend(!0, {}, M.defaults, this.element.data(), i);var s = this.options.rowCount = this.element.data().rowCount || i.rowCount || this.options.rowCount;this.columns = [], this.current = 1, this.currentRows = [], this.identifier = null, this.selection = !1, this.converter = null, this.rowCount = t.isArray(s) ? s[0] : s, this.rows = [], this.searchPhrase = "", this.selectedRows = [], this.sortDictionary = {}, this.total = 0, this.totalPages = 0, this.cachedParams = { lbl: this.options.labels, css: this.options.css, ctx: {} }, this.header = null, this.footer = null, this.xqr = null;\n  };if (M.defaults = { navigation: 3, padding: 2, columnSelection: !0, rowCount: [10, 25, 50, -1], selection: !1, multiSelect: !1, rowSelect: !1, keepSelection: !1, highlightRows: !1, sorting: !0, multiSort: !1, searchSettings: { delay: 250, characters: 1 }, ajax: !1, ajaxSettings: { method: "POST" }, post: {}, url: "", caseSensitive: !0, requestHandler: function (t) {\n      return t;\n    }, responseHandler: function (t) {\n      return t;\n    }, converters: { numeric: { from: function (t) {\n          return +t;\n        }, to: function (t) {\n          return t + "";\n        } }, string: { from: function (t) {\n          return t;\n        }, to: function (t) {\n          return t;\n        } } }, css: { actions: "actions btn-group", center: "text-center", columnHeaderAnchor: "column-header-anchor", columnHeaderText: "text", dropDownItem: "dropdown-item", dropDownItemButton: "dropdown-item-button", dropDownItemCheckbox: "dropdown-item-checkbox", dropDownMenu: "dropdown btn-group", dropDownMenuItems: "dropdown-menu pull-right", dropDownMenuText: "dropdown-text", footer: "bootgrid-footer container-fluid", header: "bootgrid-header container-fluid", icon: "icon glyphicon", iconColumns: "glyphicon-th-list", iconDown: "glyphicon-chevron-down", iconRefresh: "glyphicon-refresh", iconSearch: "glyphicon-search", iconUp: "glyphicon-chevron-up", infos: "infos", left: "text-left", pagination: "pagination", paginationButton: "button", responsiveTable: "table-responsive", right: "text-right", search: "search form-group", searchField: "search-field form-control", selectBox: "select-box", selectCell: "select-cell", selected: "active", sortable: "sortable", table: "bootgrid-table table" }, formatters: {}, labels: { all: "All", infos: "Showing {{ctx.start}} to {{ctx.end}} of {{ctx.total}} entries", loading: "Loading...", noResults: "No results found!", refresh: "Refresh", search: "Search" }, statusMapping: { 0: "success", 1: "info", 2: "warning", 3: "danger" }, templates: { actionButton: \'<button class="btn btn-default" type="button" title="{{ctx.text}}">{{ctx.content}}</button>\', actionDropDown: \'<div class="{{css.dropDownMenu}}"><button class="btn btn-default dropdown-toggle" type="button" data-toggle="dropdown"><span class="{{css.dropDownMenuText}}">{{ctx.content}}</span> <span class="caret"></span></button><ul class="{{css.dropDownMenuItems}}" role="menu"></ul></div>\', actionDropDownItem: \'<li><a data-action="{{ctx.action}}" class="{{css.dropDownItem}} {{css.dropDownItemButton}}">{{ctx.text}}</a></li>\', actionDropDownCheckboxItem: \'<li><div class="checkbox"><label class="{{css.dropDownItem}}"><input name="{{ctx.name}}" type="checkbox" value="1" class="{{css.dropDownItemCheckbox}}" {{ctx.checked}} /> {{ctx.label}}<i class="input-helper"></i></label></div></li>\', actions: \'<div class="{{css.actions}}"></div>\', body: "<tbody></tbody>", cell: \'<td class="{{ctx.css}}" style="{{ctx.style}}">{{ctx.content}}</td>\', footer: \'<div id="{{ctx.id}}" class="{{css.footer}}"><div class="row"><div class="col-sm-6"><p class="{{css.pagination}}"></p></div><div class="col-sm-6 infoBar"><p class="{{css.infos}}"></p></div></div></div>\', header: \'<div id="{{ctx.id}}" class="{{css.header}}"><div class="row"><div class="col-sm-12 actionBar"><p class="{{css.search}}"></p><p class="{{css.actions}}"></p></div></div></div>\', headerCell: \'<th data-column-id="{{ctx.column.id}}" class="{{ctx.css}}" style="{{ctx.style}}"><a href="javascript:void(0);" class="{{css.columnHeaderAnchor}} {{ctx.sortable}}"><span class="{{css.columnHeaderText}}">{{ctx.column.text}}</span>{{ctx.icon}}</a></th>\', icon: \'<span class="{{css.icon}} {{ctx.iconCss}}"></span>\', infos: \'<div class="{{css.infos}}">{{lbl.infos}}</div>\', loading: \'<tr><td colspan="{{ctx.columns}}" class="loading">{{lbl.loading}}</td></tr>\', noResults: \'<tr><td colspan="{{ctx.columns}}" class="no-results">{{lbl.noResults}}</td></tr>\', pagination: \'<ul class="{{css.pagination}}"></ul>\', paginationItem: \'<li class="{{ctx.css}}"><a data-page="{{ctx.page}}" class="{{css.paginationButton}}">{{ctx.text}}</a></li>\', rawHeaderCell: \'<th class="{{ctx.css}}">{{ctx.content}}</th>\', row: "<tr{{ctx.attr}}>{{ctx.cells}}</tr>", search: \'<div class="{{css.search}}"><div class="input-group"><span class="{{css.icon}} input-group-addon {{css.iconSearch}}"></span> <input type="text" class="{{css.searchField}}" placeholder="{{lbl.search}}" /></div></div>\', select: \'<div class="checkbox"><label><input name="select" type="{{ctx.type}}" class="{{css.selectBox}}" value="{{ctx.value}}" {{ctx.checked}} /><i class="input-helper"></i></label></div>\' } }, M.prototype.append = function (t) {\n    if (this.options.ajax) ;else {\n      for (var e = [], s = 0; s < t.length; s++) i.call(this, t[s]) && e.push(t[s]);B.call(this), c.call(this, e), u.call(this), this.element.trigger("appended" + j, [e]);\n    }return this;\n  }, M.prototype.clear = function () {\n    if (this.options.ajax) ;else {\n      var e = t.extend([], this.rows);this.rows = [], this.current = 1, this.total = 0, u.call(this), this.element.trigger("cleared" + j, [e]);\n    }return this;\n  }, M.prototype.destroy = function () {\n    return t(e).off(j), 1 & this.options.navigation && this.header.remove(), 2 & this.options.navigation && this.footer.remove(), this.element.before(this.origin).remove(), this;\n  }, M.prototype.reload = function () {\n    return this.current = 1, u.call(this), this;\n  }, M.prototype.remove = function (t) {\n    if (null != this.identifier) {\n      if (this.options.ajax) ;else {\n        t = t || this.selectedRows;for (var e, i = [], s = 0; s < t.length; s++) {\n          e = t[s];for (var o = 0; o < this.rows.length; o++) if (this.rows[o][this.identifier] === e) {\n            i.push(this.rows[o]), this.rows.splice(o, 1);break;\n          }\n        }this.current = 1, u.call(this), this.element.trigger("removed" + j, [i]);\n      }\n    }return this;\n  }, M.prototype.search = function (t) {\n    if (t = t || "", this.searchPhrase !== t) {\n      var e = r(this.options.css.searchField),\n          i = s.call(this, e);i.val(t);\n    }return S.call(this, t), this;\n  }, M.prototype.select = function (e) {\n    if (this.selection) {\n      e = e || this.currentRows.propValues(this.identifier);for (var i, s, o = []; e.length > 0 && (this.options.multiSelect || 1 !== o.length);) if (i = e.pop(), -1 === t.inArray(i, this.selectedRows)) for (s = 0; s < this.currentRows.length; s++) if (this.currentRows[s][this.identifier] === i) {\n        o.push(this.currentRows[s]), this.selectedRows.push(i);break;\n      }if (o.length > 0) {\n        var n = r(this.options.css.selectBox),\n            l = this.selectedRows.length >= this.currentRows.length;for (s = 0; !this.options.keepSelection && l && s < this.currentRows.length;) l = -1 !== t.inArray(this.currentRows[s++][this.identifier], this.selectedRows);for (this.element.find("thead " + n).prop("checked", l), this.options.multiSelect || this.element.find("tbody > tr " + n + ":checked").trigger("click" + j), s = 0; s < this.selectedRows.length; s++) this.element.find(\'tbody > tr[data-row-id="\' + this.selectedRows[s] + \'"]\').addClass(this.options.css.selected)._bgAria("selected", "true").find(n).prop("checked", !0);this.element.trigger("selected" + j, [o]);\n      }\n    }return this;\n  }, M.prototype.deselect = function (e) {\n    if (this.selection) {\n      e = e || this.currentRows.propValues(this.identifier);for (var i, s, o, n = []; e.length > 0;) if (i = e.pop(), o = t.inArray(i, this.selectedRows), -1 !== o) for (s = 0; s < this.currentRows.length; s++) if (this.currentRows[s][this.identifier] === i) {\n        n.push(this.currentRows[s]), this.selectedRows.splice(o, 1);break;\n      }if (n.length > 0) {\n        var l = r(this.options.css.selectBox);for (this.element.find("thead " + l).prop("checked", !1), s = 0; s < n.length; s++) this.element.find(\'tbody > tr[data-row-id="\' + n[s][this.identifier] + \'"]\').removeClass(this.options.css.selected)._bgAria("selected", "false").find(l).prop("checked", !1);this.element.trigger("deselected" + j, [n]);\n      }\n    }return this;\n  }, M.prototype.sort = function (e) {\n    var i = e ? t.extend({}, e) : {};return i === this.sortDictionary ? this : (this.sortDictionary = i, R.call(this), B.call(this), u.call(this), this);\n  }, M.prototype.getColumnSettings = function () {\n    return t.merge([], this.columns);\n  }, M.prototype.getCurrentPage = function () {\n    return this.current;\n  }, M.prototype.getCurrentRows = function () {\n    return t.merge([], this.currentRows);\n  }, M.prototype.getRowCount = function () {\n    return this.rowCount;\n  }, M.prototype.getSearchPhrase = function () {\n    return this.searchPhrase;\n  }, M.prototype.getSelectedRows = function () {\n    return t.merge([], this.selectedRows);\n  }, M.prototype.getSortDictionary = function () {\n    return t.extend({}, this.sortDictionary);\n  }, M.prototype.getTotalPageCount = function () {\n    return this.totalPages;\n  }, M.prototype.getTotalRowCount = function () {\n    return this.total;\n  }, t.fn.extend({ _bgAria: function (t, e) {\n      return e ? this.attr("aria-" + t, e) : this.attr("aria-" + t);\n    }, _bgBusyAria: function (t) {\n      return null == t || t ? this._bgAria("busy", "true") : this._bgAria("busy", "false");\n    }, _bgRemoveAria: function (t) {\n      return this.removeAttr("aria-" + t);\n    }, _bgEnableAria: function (t) {\n      return null == t || t ? this.removeClass("disabled")._bgAria("disabled", "false") : this.addClass("disabled")._bgAria("disabled", "true");\n    }, _bgEnableField: function (t) {\n      return null == t || t ? this.removeAttr("disabled") : this.attr("disabled", "disable");\n    }, _bgShowAria: function (t) {\n      return null == t || t ? this.show()._bgAria("hidden", "false") : this.hide()._bgAria("hidden", "true");\n    }, _bgSelectAria: function (t) {\n      return null == t || t ? this.addClass("active")._bgAria("selected", "true") : this.removeClass("active")._bgAria("selected", "false");\n    }, _bgId: function (t) {\n      return t ? this.attr("id", t) : this.attr("id");\n    } }), !String.prototype.resolve) {\n    var T = { checked: function (t) {\n        return "boolean" == typeof t ? t ? \'checked="checked"\' : "" : t;\n      } };String.prototype.resolve = function (e, i) {\n      var s = this;return t.each(e, function (e, o) {\n        if (null != o && "function" != typeof o) if ("object" == typeof o) {\n          var n = i ? t.extend([], i) : [];n.push(e), s = s.resolve(o, n) + "";\n        } else {\n          T && T[e] && "function" == typeof T[e] && (o = T[e](o)), e = i ? i.join(".") + "." + e : e;var r = new RegExp("\\\\{\\\\{" + e + "\\\\}\\\\}", "gm");s = s.replace(r, o.replace ? o.replace(/\\$/gi, "&#36;") : o);\n        }\n      }), s;\n    };\n  }Array.prototype.first || (Array.prototype.first = function (t) {\n    for (var e = 0; e < this.length; e++) {\n      var i = this[e];if (t(i)) return i;\n    }return null;\n  }), Array.prototype.contains || (Array.prototype.contains = function (t) {\n    for (var e = 0; e < this.length; e++) {\n      var i = this[e];if (t(i)) return !0;\n    }return !1;\n  }), Array.prototype.page || (Array.prototype.page = function (t, e) {\n    var i = (t - 1) * e,\n        s = i + e;return this.length > i ? this.length > s ? this.slice(i, s) : this.slice(i) : [];\n  }), Array.prototype.where || (Array.prototype.where = function (t) {\n    for (var e = [], i = 0; i < this.length; i++) {\n      var s = this[i];t(s) && e.push(s);\n    }return e;\n  }), Array.prototype.propValues || (Array.prototype.propValues = function (t) {\n    for (var e = [], i = 0; i < this.length; i++) e.push(this[i][t]);return e;\n  });var E = t.fn.bootgrid;t.fn.bootgrid = function (e) {\n    var i = Array.prototype.slice.call(arguments, 1),\n        s = null,\n        o = this.each(function (o) {\n      var n = t(this),\n          r = n.data(j),\n          l = "object" == typeof e && e;if ((r || "destroy" !== e) && (r || (n.data(j, r = new M(this, l)), a.call(r)), "string" == typeof e)) if (0 === e.indexOf("get") && 0 === o) s = r[e].apply(r, i);else if (0 !== e.indexOf("get")) return r[e].apply(r, i);\n    });return "string" == typeof e && 0 === e.indexOf("get") ? s : o;\n  }, t.fn.bootgrid.Constructor = M, t.fn.bootgrid.noConflict = function () {\n    return t.fn.bootgrid = E, this;\n  }, t(\'[data-toggle="bootgrid"]\').bootgrid();\n}(jQuery, window);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(116)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,');
},116:function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function () {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype,\n      ObjProto = Object.prototype,\n      FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var push = ArrayProto.push,\n      slice = ArrayProto.slice,\n      toString = ObjProto.toString,\n      hasOwnProperty = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var nativeIsArray = Array.isArray,\n      nativeKeys = Object.keys,\n      nativeBind = FuncProto.bind,\n      nativeCreate = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function () {};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function (obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (true) {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.8.3';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function (func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1:\n        return function (value) {\n          return func.call(context, value);\n        };\n      case 2:\n        return function (value, other) {\n          return func.call(context, value, other);\n        };\n      case 3:\n        return function (value, index, collection) {\n          return func.call(context, value, index, collection);\n        };\n      case 4:\n        return function (accumulator, value, index, collection) {\n          return func.call(context, accumulator, value, index, collection);\n        };\n    }\n    return function () {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function (value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n  };\n  _.iteratee = function (value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function (keysFunc, undefinedOnly) {\n    return function (obj) {\n      var length = arguments.length;\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function (prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor();\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var property = function (key) {\n    return function (obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = property('length');\n  var isArrayLike = function (collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function (obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function (obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function (obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function (obj, predicate, context) {\n    var key;\n    if (isArrayLike(obj)) {\n      key = _.findIndex(obj, predicate, context);\n    } else {\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function (obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function (value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function (obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function (obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function (obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function (obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function (obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function (value) {\n      var func = isFunc ? method : value[method];\n      return func == null ? func : func.apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function (obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function (obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function (obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function (obj, iteratee, context) {\n    var result = -Infinity,\n        lastComputed = -Infinity,\n        value,\n        computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function (value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function (obj, iteratee, context) {\n    var result = Infinity,\n        lastComputed = Infinity,\n        value,\n        computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function (value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function (obj) {\n    var set = isArrayLike(obj) ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function (obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function (obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function (value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function (left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function (behavior) {\n    return function (obj, iteratee, context) {\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function (value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function (result, value, key) {\n    if (_.has(result, key)) result[key].push(value);else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function (result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function (result, value, key) {\n    if (_.has(result, key)) result[key]++;else result[key] = 1;\n  });\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function (obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function (obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function (obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var pass = [],\n        fail = [];\n    _.each(obj, function (value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function (array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function (array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function (array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function (array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function (array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function (input, shallow, strict, startIndex) {\n    var output = [],\n        idx = 0;\n    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0,\n            len = value.length;\n        output.length += len;\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function (array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function (array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function (array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function () {\n    return _.uniq(flatten(arguments, true, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function (array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function (array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function (value) {\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function () {\n    return _.unzip(arguments);\n  };\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices\n  _.unzip = function (array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function (list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions\n  function createPredicateIndexFinder(dir) {\n    return function (array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a predicate test\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function (array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0,\n        high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1;else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function (array, item, idx) {\n      var i = 0,\n          length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n          i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  }\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function (start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments\n  var executeBound = function (sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function (func, context) {\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var args = slice.call(arguments, 2);\n    var bound = function () {\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function (func) {\n    var boundArgs = slice.call(arguments, 1);\n    var bound = function () {\n      var position = 0,\n          length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function (obj) {\n    var i,\n        length = arguments.length,\n        key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function (func, hasher) {\n    var memoize = function (key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function (func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function () {\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function (func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function () {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function () {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function (func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function () {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function () {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function (func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function (predicate) {\n    return function () {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function () {\n    var args = arguments;\n    var start = args.length - 1;\n    return function () {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function (times, func) {\n    return function () {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function (times, func) {\n    var memo;\n    return function () {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  function collectNonEnumProps(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function (obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function (obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function (obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object\n  // In contrast to _.map it returns an object\n  _.mapObject = function (obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = _.keys(obj),\n        length = keys.length,\n        results = {},\n        currentKey;\n    for (var index = 0; index < length; index++) {\n      currentKey = keys[index];\n      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function (obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function (obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function (obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s)\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test\n  _.findKey = function (obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj),\n        key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function (object, oiteratee, context) {\n    var result = {},\n        obj = object,\n        iteratee,\n        keys;\n    if (obj == null) return result;\n    if (_.isFunction(oiteratee)) {\n      keys = _.allKeys(obj);\n      iteratee = optimizeCb(oiteratee, context);\n    } else {\n      keys = flatten(arguments, false, false, 1);\n      iteratee = function (value, key, obj) {\n        return key in obj;\n      };\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  };\n\n  // Return a copy of the object without the blacklisted properties.\n  _.omit = function (obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(flatten(arguments, false, false, 1), String);\n      iteratee = function (value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function (prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function (obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function (obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function (object, attrs) {\n    var keys = _.keys(attrs),\n        length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function (a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor,\n          bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && 'constructor' in a && 'constructor' in b) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a),\n          key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function (a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function (obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function (obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function (obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function (obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function (name) {\n    _['is' + name] = function (obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function (obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), and in Safari 8 (#1929).\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    _.isFunction = function (obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function (obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function (obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function (obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function (obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function (obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function (obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function () {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function (value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function (value) {\n    return function () {\n      return value;\n    };\n  };\n\n  _.noop = function () {};\n\n  _.property = property;\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function (obj) {\n    return obj == null ? function () {} : function (key) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function (attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function (obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function (n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function (min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function () {\n    return new Date().getTime();\n  };\n\n  // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function (map) {\n    var escaper = function (match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function (string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function (object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function (prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate: /<%([\\s\\S]+?)%>/g,\n    interpolate: /<%=([\\s\\S]+?)%>/g,\n    escape: /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\": \"'\",\n    '\\\\': '\\\\',\n    '\\r': 'r',\n    '\\n': 'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function (match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function (text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" + \"print=function(){__p+=__j.call(arguments,'');};\\n\" + source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function (data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function (obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function (instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function (obj) {\n    _.each(_.functions(obj), function (name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function () {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function () {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function (name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function () {\n      return result(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function () {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function () {\n    return '' + this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n      return _;\n    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n}).call(this);//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},117:function(module,exports){eval('module.exports = "<section id=main> <section id=content> <div class=container> <div class=block-header> <h2>动态数据表格</h2> <small>这里使用的是<code>jquery.bootgrid</code>这个插件，详情请查看<a href=http://www.jquery-bootgrid.com/ >官方网站</a></small> <ul class=actions> <li> <a href=\\"\\"> <i class=\\"zmdi zmdi-trending-up\\"></i> </a> </li> <li> <a href=\\"\\"> <i class=\\"zmdi zmdi-check-all\\"></i> </a> </li> <li class=dropdown> <a href=\\"\\" data-toggle=dropdown> <i class=\\"zmdi zmdi-more-vert\\"></i> </a> <ul class=\\"dropdown-menu dropdown-menu-right\\"> <li> <a href=\\"\\">Refresh</a> </li> <li> <a href=\\"\\">Manage Widgets</a> </li> <li> <a href=\\"\\">Widgets Settings</a> </li> </ul> </li> </ul> </div> <div class=card> <div class=card-header> <h2>Basic Example <small>It\'s just that simple. Turn your simple table into a sophisticated data table and offer your users a nice experience and great features without any effort.</small></h2> </div> <div class=table-responsive> <table id=data-table-basic class=\\"table table-striped\\"> <thead> <tr> <th data-column-id=id data-type=numeric>ID</th> <th data-column-id=sender>Sender</th> <th data-column-id=received data-order=desc>Received</th> </tr> </thead> <tbody> <tr> <td>10238</td> <td>eduardo@pingpong.com</td> <td>14.10.2013</td> </tr> <tr> <td>10243</td> <td>eduardo@pingpong.com</td> <td>19.10.2013</td> </tr> <tr> <td>10248</td> <td>eduardo@pingpong.com</td> <td>24.10.2013</td> </tr> <tr> <td>10253</td> <td>eduardo@pingpong.com</td> <td>29.10.2013</td> </tr> <tr> <td>10234</td> <td>lila@google.com</td> <td>10.10.2013</td> </tr> <tr> <td>10239</td> <td>lila@google.com</td> <td>15.10.2013</td> </tr> <tr> <td>10244</td> <td>lila@google.com</td> <td>20.10.2013</td> </tr> <tr> <td>10249</td> <td>lila@google.com</td> <td>25.10.2013</td> </tr> <tr> <td>10237</td> <td>robert@bingo.com</td> <td>13.10.2013</td> </tr> <tr> <td>10242</td> <td>robert@bingo.com</td> <td>18.10.2013</td> </tr> <tr> <td>10247</td> <td>robert@bingo.com</td> <td>23.10.2013</td> </tr> <tr> <td>10252</td> <td>robert@bingo.com</td> <td>28.10.2013</td> </tr> <tr> <td>10236</td> <td>simon@yahoo.com</td> <td>12.10.2013</td> </tr> <tr> <td>10241</td> <td>simon@yahoo.com</td> <td>17.10.2013</td> </tr> <tr> <td>10246</td> <td>simon@yahoo.com</td> <td>22.10.2013</td> </tr> <tr> <td>10251</td> <td>simon@yahoo.com</td> <td>27.10.2013</td> </tr> <tr> <td>10235</td> <td>tim@microsoft.com</td> <td>11.10.2013</td> </tr> <tr> <td>10240</td> <td>tim@microsoft.com</td> <td>16.10.2013</td> </tr> <tr> <td>10245</td> <td>tim@microsoft.com</td> <td>21.10.2013</td> </tr> <tr> <td>10250</td> <td>tim@microsoft.com</td> <td>26.10.2013</td> </tr> </tbody> </table> </div> </div> <div class=card> <div class=card-header> <h2>Selection Example <small>Ensure that the data attribute [data-identifier=\\"true\\"] is set on one column header.</small></h2> </div> <div class=table-responsive> <table id=data-table-selection class=\\"table table-striped\\"> <thead> <tr> <th data-column-id=id data-type=numeric data-identifier=true>ID</th> <th data-column-id=sender>Sender</th> <th data-column-id=received data-order=desc>Received</th> </tr> </thead> <tbody> <tr> <td>10238</td> <td>eduardo@pingpong.com</td> <td>14.10.2013</td> </tr> <tr> <td>10243</td> <td>eduardo@pingpong.com</td> <td>19.10.2013</td> </tr> <tr> <td>10248</td> <td>eduardo@pingpong.com</td> <td>24.10.2013</td> </tr> <tr> <td>10253</td> <td>eduardo@pingpong.com</td> <td>29.10.2013</td> </tr> <tr> <td>10234</td> <td>lila@google.com</td> <td>10.10.2013</td> </tr> <tr> <td>10239</td> <td>lila@google.com</td> <td>15.10.2013</td> </tr> <tr> <td>10244</td> <td>lila@google.com</td> <td>20.10.2013</td> </tr> <tr> <td>10249</td> <td>lila@google.com</td> <td>25.10.2013</td> </tr> <tr> <td>10237</td> <td>robert@bingo.com</td> <td>13.10.2013</td> </tr> <tr> <td>10242</td> <td>robert@bingo.com</td> <td>18.10.2013</td> </tr> <tr> <td>10247</td> <td>robert@bingo.com</td> <td>23.10.2013</td> </tr> <tr> <td>10252</td> <td>robert@bingo.com</td> <td>28.10.2013</td> </tr> <tr> <td>10236</td> <td>simon@yahoo.com</td> <td>12.10.2013</td> </tr> <tr> <td>10241</td> <td>simon@yahoo.com</td> <td>17.10.2013</td> </tr> <tr> <td>10246</td> <td>simon@yahoo.com</td> <td>22.10.2013</td> </tr> <tr> <td>10251</td> <td>simon@yahoo.com</td> <td>27.10.2013</td> </tr> <tr> <td>10235</td> <td>tim@microsoft.com</td> <td>11.10.2013</td> </tr> <tr> <td>10240</td> <td>tim@microsoft.com</td> <td>16.10.2013</td> </tr> <tr> <td>10245</td> <td>tim@microsoft.com</td> <td>21.10.2013</td> </tr> <tr> <td>10250</td> <td>tim@microsoft.com</td> <td>26.10.2013</td> </tr> </tbody> </table> </div> </div> <div class=card> <div class=card-header> <h2>Selection Example <small>Ensure that the data attribute [data-identifier=\\"true\\"] is set on one column header.</small></h2> </div> <table id=data-table-command class=\\"table table-striped table-vmiddle\\"> <thead> <tr> <th data-column-id=id data-type=numeric>ID</th> <th data-column-id=sender>Sender</th> <th data-column-id=received data-order=desc>Received</th> <th data-column-id=commands data-formatter=commands data-sortable=false>Commands</th> </tr> </thead> <tbody> <tr> <td>10238</td> <td>eduardo@pingpong.com</td> <td>14.10.2013</td> </tr> <tr> <td>10243</td> <td>eduardo@pingpong.com</td> <td>19.10.2013</td> </tr> <tr> <td>10248</td> <td>eduardo@pingpong.com</td> <td>24.10.2013</td> </tr> <tr> <td>10253</td> <td>eduardo@pingpong.com</td> <td>29.10.2013</td> </tr> <tr> <td>10234</td> <td>lila@google.com</td> <td>10.10.2013</td> </tr> <tr> <td>10239</td> <td>lila@google.com</td> <td>15.10.2013</td> </tr> <tr> <td>10244</td> <td>lila@google.com</td> <td>20.10.2013</td> </tr> <tr> <td>10249</td> <td>lila@google.com</td> <td>25.10.2013</td> </tr> <tr> <td>10237</td> <td>robert@bingo.com</td> <td>13.10.2013</td> </tr> <tr> <td>10242</td> <td>robert@bingo.com</td> <td>18.10.2013</td> </tr> <tr> <td>10247</td> <td>robert@bingo.com</td> <td>23.10.2013</td> </tr> <tr> <td>10252</td> <td>robert@bingo.com</td> <td>28.10.2013</td> </tr> <tr> <td>10236</td> <td>simon@yahoo.com</td> <td>12.10.2013</td> </tr> <tr> <td>10241</td> <td>simon@yahoo.com</td> <td>17.10.2013</td> </tr> <tr> <td>10246</td> <td>simon@yahoo.com</td> <td>22.10.2013</td> </tr> <tr> <td>10251</td> <td>simon@yahoo.com</td> <td>27.10.2013</td> </tr> <tr> <td>10235</td> <td>tim@microsoft.com</td> <td>11.10.2013</td> </tr> <tr> <td>10240</td> <td>tim@microsoft.com</td> <td>16.10.2013</td> </tr> <tr> <td>10245</td> <td>tim@microsoft.com</td> <td>21.10.2013</td> </tr> <tr> <td>10250</td> <td>tim@microsoft.com</td> <td>26.10.2013</td> </tr> </tbody> </table> </div> </div> </section> </section> ";//# sourceMappingURL=data:application/json;charset=utf-8;base64,')}});
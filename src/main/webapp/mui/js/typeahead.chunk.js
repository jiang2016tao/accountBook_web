webpackJsonp([21],{140:function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* =============================================================\n * bootstrap3-typeahead.js v3.1.0\n * https://github.com/bassjobsen/Bootstrap-3-Typeahead\n * =============================================================\n * Original written by @mdo and @fat\n * =============================================================\n * Copyright 2014 Bass Jobsen @bassjobsen\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ============================================================ */\n\n(function (root, factory) {\n\n  'use strict';\n\n  // CommonJS module is defined\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = factory(__webpack_require__(1));\n  }\n  // AMD module is defined\n  else if (true) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($) {\n        return factory($);\n      }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {\n      factory(root.jQuery);\n    }\n})(this, function ($) {\n\n  'use strict';\n  // jshint laxcomma: true\n\n\n  /* TYPEAHEAD PUBLIC CLASS DEFINITION\n   * ================================= */\n\n  var Typeahead = function (element, options) {\n    this.$element = $(element);\n    this.options = $.extend({}, $.fn.typeahead.defaults, options);\n    this.matcher = this.options.matcher || this.matcher;\n    this.sorter = this.options.sorter || this.sorter;\n    this.select = this.options.select || this.select;\n    this.autoSelect = typeof this.options.autoSelect == 'boolean' ? this.options.autoSelect : true;\n    this.highlighter = this.options.highlighter || this.highlighter;\n    this.render = this.options.render || this.render;\n    this.updater = this.options.updater || this.updater;\n    this.displayText = this.options.displayText || this.displayText;\n    this.source = this.options.source;\n    this.delay = this.options.delay;\n    this.$menu = $(this.options.menu);\n    this.$appendTo = this.options.appendTo ? $(this.options.appendTo) : null;\n    this.shown = false;\n    this.listen();\n    this.showHintOnFocus = typeof this.options.showHintOnFocus == 'boolean' ? this.options.showHintOnFocus : false;\n    this.afterSelect = this.options.afterSelect;\n    this.addItem = false;\n  };\n\n  Typeahead.prototype = {\n\n    constructor: Typeahead,\n\n    select: function () {\n      var val = this.$menu.find('.active').data('value');\n      this.$element.data('active', val);\n      if (this.autoSelect || val) {\n        var newVal = this.updater(val);\n        // Updater can be set to any random functions via \"options\" parameter in constructor above.\n        // Add null check for cases when upadter returns void or undefined.\n        if (!newVal) {\n          newVal = \"\";\n        }\n        this.$element.val(this.displayText(newVal) || newVal).change();\n        this.afterSelect(newVal);\n      }\n      return this.hide();\n    },\n\n    updater: function (item) {\n      return item;\n    },\n\n    setSource: function (source) {\n      this.source = source;\n    },\n\n    show: function () {\n      var pos = $.extend({}, this.$element.position(), {\n        height: this.$element[0].offsetHeight\n      }),\n          scrollHeight;\n\n      scrollHeight = typeof this.options.scrollHeight == 'function' ? this.options.scrollHeight.call() : this.options.scrollHeight;\n\n      var element;\n      if (this.shown) {\n        element = this.$menu;\n      } else if (this.$appendTo) {\n        element = this.$menu.appendTo(this.$appendTo);\n      } else {\n        element = this.$menu.insertAfter(this.$element);\n      }\n\n      var inputDom = element.prev();\n      var tmpHeight = inputDom.offset();\n      var bodyScroll = document.body.scrollTop;\n\n      element.css({\n        top: tmpHeight.top + pos.height - bodyScroll,\n        left: tmpHeight.left, position: 'fixed'\n      }).show();\n\n      this.shown = true;\n      return this;\n    },\n\n    hide: function () {\n      this.$menu.hide();\n      this.shown = false;\n      return this;\n    },\n\n    lookup: function (query) {\n      var items;\n      if (typeof query != 'undefined' && query !== null) {\n        this.query = query;\n      } else {\n        this.query = this.$element.val() || '';\n      }\n\n      if (this.query.length < this.options.minLength) {\n        return this.shown ? this.hide() : this;\n      }\n\n      var worker = $.proxy(function () {\n\n        if ($.isFunction(this.source)) this.source(this.query, $.proxy(this.process, this));else if (this.source) {\n          this.process(this.source);\n        }\n      }, this);\n\n      clearTimeout(this.lookupWorker);\n      this.lookupWorker = setTimeout(worker, this.delay);\n    },\n\n    process: function (items) {\n      var that = this;\n\n      items = $.grep(items, function (item) {\n        return that.matcher(item);\n      });\n\n      items = this.sorter(items);\n\n      if (!items.length && !this.options.addItem) {\n        return this.shown ? this.hide() : this;\n      }\n\n      if (items.length > 0) {\n        this.$element.data('active', items[0]);\n      } else {\n        this.$element.data('active', null);\n      }\n\n      // Add item\n      if (this.options.addItem) {\n        items.push(this.options.addItem);\n      }\n\n      if (this.options.items == 'all') {\n        return this.render(items).show();\n      } else {\n        return this.render(items.slice(0, this.options.items)).show();\n      }\n    },\n\n    matcher: function (item) {\n      var it = this.displayText(item);\n      return ~it.toLowerCase().indexOf(this.query.toLowerCase());\n    },\n\n    sorter: function (items) {\n      var beginswith = [],\n          caseSensitive = [],\n          caseInsensitive = [],\n          item;\n\n      while (item = items.shift()) {\n        var it = this.displayText(item);\n        if (!it.toLowerCase().indexOf(this.query.toLowerCase())) beginswith.push(item);else if (~it.indexOf(this.query)) caseSensitive.push(item);else caseInsensitive.push(item);\n      }\n\n      return beginswith.concat(caseSensitive, caseInsensitive);\n    },\n\n    highlighter: function (item) {\n      var html = $('<div></div>');\n      var query = this.query;\n      var i = item.toLowerCase().indexOf(query.toLowerCase());\n      var len, leftPart, middlePart, rightPart, strong;\n      len = query.length;\n      if (len === 0) {\n        return html.text(item).html();\n      }\n      while (i > -1) {\n        leftPart = item.substr(0, i);\n        middlePart = item.substr(i, len);\n        rightPart = item.substr(i + len);\n        strong = $('<strong></strong>').text(middlePart);\n        html.append(document.createTextNode(leftPart)).append(strong);\n        item = rightPart;\n        i = item.toLowerCase().indexOf(query.toLowerCase());\n      }\n      return html.append(document.createTextNode(item)).html();\n    },\n\n    render: function (items) {\n      var that = this;\n      var self = this;\n      var activeFound = false;\n      items = $(items).map(function (i, item) {\n        var text = self.displayText(item);\n        i = $(that.options.item).data('value', item);\n        i.find('a').html(that.highlighter(text));\n        if (text == self.$element.val()) {\n          i.addClass('active');\n          self.$element.data('active', item);\n          activeFound = true;\n        }\n        return i[0];\n      });\n\n      if (this.autoSelect && !activeFound) {\n        items.first().addClass('active');\n        this.$element.data('active', items.first().data('value'));\n      }\n      this.$menu.html(items);\n      return this;\n    },\n\n    displayText: function (item) {\n      return typeof item !== 'undefined' && typeof item.name != 'undefined' && item.name || item;\n    },\n\n    next: function (event) {\n      var active = this.$menu.find('.active').removeClass('active'),\n          next = active.next();\n\n      if (!next.length) {\n        next = $(this.$menu.find('li')[0]);\n      }\n\n      next.addClass('active');\n    },\n\n    prev: function (event) {\n      var active = this.$menu.find('.active').removeClass('active'),\n          prev = active.prev();\n\n      if (!prev.length) {\n        prev = this.$menu.find('li').last();\n      }\n\n      prev.addClass('active');\n    },\n\n    listen: function () {\n      this.$element.on('focus', $.proxy(this.focus, this)).on('blur', $.proxy(this.blur, this)).on('keypress', $.proxy(this.keypress, this)).on('keyup', $.proxy(this.keyup, this));\n\n      if (this.eventSupported('keydown')) {\n        this.$element.on('keydown', $.proxy(this.keydown, this));\n      }\n\n      this.$menu.on('click', $.proxy(this.click, this)).on('mouseenter', 'li', $.proxy(this.mouseenter, this)).on('mouseleave', 'li', $.proxy(this.mouseleave, this));\n    },\n\n    destroy: function () {\n      this.$element.data('typeahead', null);\n      this.$element.data('active', null);\n      this.$element.off('focus').off('blur').off('keypress').off('keyup');\n\n      if (this.eventSupported('keydown')) {\n        this.$element.off('keydown');\n      }\n\n      this.$menu.remove();\n    },\n\n    eventSupported: function (eventName) {\n      var isSupported = eventName in this.$element;\n      if (!isSupported) {\n        this.$element.setAttribute(eventName, 'return;');\n        isSupported = typeof this.$element[eventName] === 'function';\n      }\n      return isSupported;\n    },\n\n    move: function (e) {\n      if (!this.shown) return;\n\n      switch (e.keyCode) {\n        case 9: // tab\n        case 13: // enter\n        case 27:\n          // escape\n          e.preventDefault();\n          break;\n\n        case 38:\n          // up arrow\n          // with the shiftKey (this is actually the left parenthesis)\n          if (e.shiftKey) return;\n          e.preventDefault();\n          this.prev();\n          break;\n\n        case 40:\n          // down arrow\n          // with the shiftKey (this is actually the right parenthesis)\n          if (e.shiftKey) return;\n          e.preventDefault();\n          this.next();\n          break;\n      }\n    },\n\n    keydown: function (e) {\n      this.suppressKeyPressRepeat = ~$.inArray(e.keyCode, [40, 38, 9, 13, 27]);\n      if (!this.shown && e.keyCode == 40) {\n        this.lookup();\n      } else {\n        this.move(e);\n      }\n    },\n\n    keypress: function (e) {\n      if (this.suppressKeyPressRepeat) return;\n      this.move(e);\n    },\n\n    keyup: function (e) {\n      switch (e.keyCode) {\n        case 40: // down arrow\n        case 38: // up arrow\n        case 16: // shift\n        case 17: // ctrl\n        case 18:\n          // alt\n          break;\n\n        case 9: // tab\n        case 13:\n          // enter\n          if (!this.shown) return;\n          this.select();\n          break;\n\n        case 27:\n          // escape\n          if (!this.shown) return;\n          this.hide();\n          break;\n        default:\n          this.lookup();\n      }\n\n      e.preventDefault();\n    },\n\n    focus: function (e) {\n      if (!this.focused) {\n        this.focused = true;\n        if (this.options.showHintOnFocus) {\n          this.lookup('');\n        }\n      }\n    },\n\n    blur: function (e) {\n      this.focused = false;\n      if (!this.mousedover && this.shown) this.hide();\n    },\n\n    click: function (e) {\n      e.preventDefault();\n      this.select();\n      this.$element.focus();\n    },\n\n    mouseenter: function (e) {\n      this.mousedover = true;\n      this.$menu.find('.active').removeClass('active');\n      $(e.currentTarget).addClass('active');\n    },\n\n    mouseleave: function (e) {\n      this.mousedover = false;\n      if (!this.focused && this.shown) this.hide();\n    }\n\n  };\n\n  /* TYPEAHEAD PLUGIN DEFINITION\n   * =========================== */\n\n  var old = $.fn.typeahead;\n\n  $.fn.typeahead = function (option) {\n    var arg = arguments;\n    if (typeof option == 'string' && option == 'getActive') {\n      return this.data('active');\n    }\n    return this.each(function () {\n      var $this = $(this),\n          data = $this.data('typeahead'),\n          options = typeof option == 'object' && option;\n      if (!data) $this.data('typeahead', data = new Typeahead(this, options));\n      if (typeof option == 'string') {\n        if (arg.length > 1) {\n          data[option].apply(data, Array.prototype.slice.call(arg, 1));\n        } else {\n          data[option]();\n        }\n      }\n    });\n  };\n\n  $.fn.typeahead.defaults = {\n    source: [],\n    items: 8,\n    menu: '<ul class=\"typeahead dropdown-menu\" role=\"listbox\"></ul>',\n    item: '<li><a class=\"dropdown-item\" href=\"#\" role=\"option\"></a></li>',\n    minLength: 1,\n    scrollHeight: 0,\n    autoSelect: true,\n    afterSelect: $.noop,\n    addItem: false,\n    delay: 0\n  };\n\n  $.fn.typeahead.Constructor = Typeahead;\n\n  /* TYPEAHEAD NO CONFLICT\n   * =================== */\n\n  $.fn.typeahead.noConflict = function () {\n    $.fn.typeahead = old;\n    return this;\n  };\n\n  /* TYPEAHEAD DATA-API\n   * ================== */\n\n  $(document).on('focus.typeahead.data-api', '[data-provide=\"typeahead\"]', function (e) {\n    var $this = $(this);\n    if ($this.data('typeahead')) return;\n    $this.typeahead($this.data());\n  });\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvdHlwZWFoZWFkL2Jvb3RzdHJhcDMtdHlwZWFoZWFkLmpzP2M3ZWMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogYm9vdHN0cmFwMy10eXBlYWhlYWQuanMgdjMuMS4wXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYmFzc2pvYnNlbi9Cb290c3RyYXAtMy1UeXBlYWhlYWRcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIE9yaWdpbmFsIHdyaXR0ZW4gYnkgQG1kbyBhbmQgQGZhdFxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTQgQmFzcyBKb2JzZW4gQGJhc3Nqb2JzZW5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBDb21tb25KUyBtb2R1bGUgaXMgZGVmaW5lZFxuXG4gIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7XG4gIH1cbiAgLy8gQU1EIG1vZHVsZSBpcyBkZWZpbmVkXG4gIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZ1bmN0aW9uICgkKSB7XG4gICAgICAgIHJldHVybiBmYWN0b3J5KCQpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZhY3Rvcnkocm9vdC5qUXVlcnkpO1xuICAgIH1cbn0pKHRoaXMsIGZ1bmN0aW9uICgkKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBqc2hpbnQgbGF4Y29tbWE6IHRydWVcblxuXG4gIC8qIFRZUEVBSEVBRCBQVUJMSUMgQ0xBU1MgREVGSU5JVElPTlxuICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuICB2YXIgVHlwZWFoZWFkID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgJC5mbi50eXBlYWhlYWQuZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgIHRoaXMubWF0Y2hlciA9IHRoaXMub3B0aW9ucy5tYXRjaGVyIHx8IHRoaXMubWF0Y2hlcjtcbiAgICB0aGlzLnNvcnRlciA9IHRoaXMub3B0aW9ucy5zb3J0ZXIgfHwgdGhpcy5zb3J0ZXI7XG4gICAgdGhpcy5zZWxlY3QgPSB0aGlzLm9wdGlvbnMuc2VsZWN0IHx8IHRoaXMuc2VsZWN0O1xuICAgIHRoaXMuYXV0b1NlbGVjdCA9IHR5cGVvZiB0aGlzLm9wdGlvbnMuYXV0b1NlbGVjdCA9PSAnYm9vbGVhbicgPyB0aGlzLm9wdGlvbnMuYXV0b1NlbGVjdCA6IHRydWU7XG4gICAgdGhpcy5oaWdobGlnaHRlciA9IHRoaXMub3B0aW9ucy5oaWdobGlnaHRlciB8fCB0aGlzLmhpZ2hsaWdodGVyO1xuICAgIHRoaXMucmVuZGVyID0gdGhpcy5vcHRpb25zLnJlbmRlciB8fCB0aGlzLnJlbmRlcjtcbiAgICB0aGlzLnVwZGF0ZXIgPSB0aGlzLm9wdGlvbnMudXBkYXRlciB8fCB0aGlzLnVwZGF0ZXI7XG4gICAgdGhpcy5kaXNwbGF5VGV4dCA9IHRoaXMub3B0aW9ucy5kaXNwbGF5VGV4dCB8fCB0aGlzLmRpc3BsYXlUZXh0O1xuICAgIHRoaXMuc291cmNlID0gdGhpcy5vcHRpb25zLnNvdXJjZTtcbiAgICB0aGlzLmRlbGF5ID0gdGhpcy5vcHRpb25zLmRlbGF5O1xuICAgIHRoaXMuJG1lbnUgPSAkKHRoaXMub3B0aW9ucy5tZW51KTtcbiAgICB0aGlzLiRhcHBlbmRUbyA9IHRoaXMub3B0aW9ucy5hcHBlbmRUbyA/ICQodGhpcy5vcHRpb25zLmFwcGVuZFRvKSA6IG51bGw7XG4gICAgdGhpcy5zaG93biA9IGZhbHNlO1xuICAgIHRoaXMubGlzdGVuKCk7XG4gICAgdGhpcy5zaG93SGludE9uRm9jdXMgPSB0eXBlb2YgdGhpcy5vcHRpb25zLnNob3dIaW50T25Gb2N1cyA9PSAnYm9vbGVhbicgPyB0aGlzLm9wdGlvbnMuc2hvd0hpbnRPbkZvY3VzIDogZmFsc2U7XG4gICAgdGhpcy5hZnRlclNlbGVjdCA9IHRoaXMub3B0aW9ucy5hZnRlclNlbGVjdDtcbiAgICB0aGlzLmFkZEl0ZW0gPSBmYWxzZTtcbiAgfTtcblxuICBUeXBlYWhlYWQucHJvdG90eXBlID0ge1xuXG4gICAgY29uc3RydWN0b3I6IFR5cGVhaGVhZCxcblxuICAgIHNlbGVjdDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbCA9IHRoaXMuJG1lbnUuZmluZCgnLmFjdGl2ZScpLmRhdGEoJ3ZhbHVlJyk7XG4gICAgICB0aGlzLiRlbGVtZW50LmRhdGEoJ2FjdGl2ZScsIHZhbCk7XG4gICAgICBpZiAodGhpcy5hdXRvU2VsZWN0IHx8IHZhbCkge1xuICAgICAgICB2YXIgbmV3VmFsID0gdGhpcy51cGRhdGVyKHZhbCk7XG4gICAgICAgIC8vIFVwZGF0ZXIgY2FuIGJlIHNldCB0byBhbnkgcmFuZG9tIGZ1bmN0aW9ucyB2aWEgXCJvcHRpb25zXCIgcGFyYW1ldGVyIGluIGNvbnN0cnVjdG9yIGFib3ZlLlxuICAgICAgICAvLyBBZGQgbnVsbCBjaGVjayBmb3IgY2FzZXMgd2hlbiB1cGFkdGVyIHJldHVybnMgdm9pZCBvciB1bmRlZmluZWQuXG4gICAgICAgIGlmICghbmV3VmFsKSB7XG4gICAgICAgICAgbmV3VmFsID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiRlbGVtZW50LnZhbCh0aGlzLmRpc3BsYXlUZXh0KG5ld1ZhbCkgfHwgbmV3VmFsKS5jaGFuZ2UoKTtcbiAgICAgICAgdGhpcy5hZnRlclNlbGVjdChuZXdWYWwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuaGlkZSgpO1xuICAgIH0sXG5cbiAgICB1cGRhdGVyOiBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfSxcblxuICAgIHNldFNvdXJjZTogZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfSxcblxuICAgIHNob3c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwb3MgPSAkLmV4dGVuZCh7fSwgdGhpcy4kZWxlbWVudC5wb3NpdGlvbigpLCB7XG4gICAgICAgIGhlaWdodDogdGhpcy4kZWxlbWVudFswXS5vZmZzZXRIZWlnaHRcbiAgICAgIH0pLFxuICAgICAgICAgIHNjcm9sbEhlaWdodDtcblxuICAgICAgc2Nyb2xsSGVpZ2h0ID0gdHlwZW9mIHRoaXMub3B0aW9ucy5zY3JvbGxIZWlnaHQgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMub3B0aW9ucy5zY3JvbGxIZWlnaHQuY2FsbCgpIDogdGhpcy5vcHRpb25zLnNjcm9sbEhlaWdodDtcblxuICAgICAgdmFyIGVsZW1lbnQ7XG4gICAgICBpZiAodGhpcy5zaG93bikge1xuICAgICAgICBlbGVtZW50ID0gdGhpcy4kbWVudTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy4kYXBwZW5kVG8pIHtcbiAgICAgICAgZWxlbWVudCA9IHRoaXMuJG1lbnUuYXBwZW5kVG8odGhpcy4kYXBwZW5kVG8pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudCA9IHRoaXMuJG1lbnUuaW5zZXJ0QWZ0ZXIodGhpcy4kZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBpbnB1dERvbSA9IGVsZW1lbnQucHJldigpO1xuICAgICAgdmFyIHRtcEhlaWdodCA9IGlucHV0RG9tLm9mZnNldCgpO1xuICAgICAgdmFyIGJvZHlTY3JvbGwgPSBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDtcblxuICAgICAgZWxlbWVudC5jc3Moe1xuICAgICAgICB0b3A6IHRtcEhlaWdodC50b3AgKyBwb3MuaGVpZ2h0IC0gYm9keVNjcm9sbCxcbiAgICAgICAgbGVmdDogdG1wSGVpZ2h0LmxlZnQsIHBvc2l0aW9uOiAnZml4ZWQnXG4gICAgICB9KS5zaG93KCk7XG5cbiAgICAgIHRoaXMuc2hvd24gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIGhpZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuJG1lbnUuaGlkZSgpO1xuICAgICAgdGhpcy5zaG93biA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIGxvb2t1cDogZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICB2YXIgaXRlbXM7XG4gICAgICBpZiAodHlwZW9mIHF1ZXJ5ICE9ICd1bmRlZmluZWQnICYmIHF1ZXJ5ICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucXVlcnkgPSB0aGlzLiRlbGVtZW50LnZhbCgpIHx8ICcnO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5xdWVyeS5sZW5ndGggPCB0aGlzLm9wdGlvbnMubWluTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgd29ya2VyID0gJC5wcm94eShmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgaWYgKCQuaXNGdW5jdGlvbih0aGlzLnNvdXJjZSkpIHRoaXMuc291cmNlKHRoaXMucXVlcnksICQucHJveHkodGhpcy5wcm9jZXNzLCB0aGlzKSk7ZWxzZSBpZiAodGhpcy5zb3VyY2UpIHtcbiAgICAgICAgICB0aGlzLnByb2Nlc3ModGhpcy5zb3VyY2UpO1xuICAgICAgICB9XG4gICAgICB9LCB0aGlzKTtcblxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMubG9va3VwV29ya2VyKTtcbiAgICAgIHRoaXMubG9va3VwV29ya2VyID0gc2V0VGltZW91dCh3b3JrZXIsIHRoaXMuZGVsYXkpO1xuICAgIH0sXG5cbiAgICBwcm9jZXNzOiBmdW5jdGlvbiAoaXRlbXMpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgaXRlbXMgPSAkLmdyZXAoaXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiB0aGF0Lm1hdGNoZXIoaXRlbSk7XG4gICAgICB9KTtcblxuICAgICAgaXRlbXMgPSB0aGlzLnNvcnRlcihpdGVtcyk7XG5cbiAgICAgIGlmICghaXRlbXMubGVuZ3RoICYmICF0aGlzLm9wdGlvbnMuYWRkSXRlbSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaG93biA/IHRoaXMuaGlkZSgpIDogdGhpcztcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5kYXRhKCdhY3RpdmUnLCBpdGVtc1swXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRlbGVtZW50LmRhdGEoJ2FjdGl2ZScsIG51bGwpO1xuICAgICAgfVxuXG4gICAgICAvLyBBZGQgaXRlbVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hZGRJdGVtKSB7XG4gICAgICAgIGl0ZW1zLnB1c2godGhpcy5vcHRpb25zLmFkZEl0ZW0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLml0ZW1zID09ICdhbGwnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlcihpdGVtcykuc2hvdygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKGl0ZW1zLnNsaWNlKDAsIHRoaXMub3B0aW9ucy5pdGVtcykpLnNob3coKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgbWF0Y2hlcjogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBpdCA9IHRoaXMuZGlzcGxheVRleHQoaXRlbSk7XG4gICAgICByZXR1cm4gfml0LnRvTG93ZXJDYXNlKCkuaW5kZXhPZih0aGlzLnF1ZXJ5LnRvTG93ZXJDYXNlKCkpO1xuICAgIH0sXG5cbiAgICBzb3J0ZXI6IGZ1bmN0aW9uIChpdGVtcykge1xuICAgICAgdmFyIGJlZ2luc3dpdGggPSBbXSxcbiAgICAgICAgICBjYXNlU2Vuc2l0aXZlID0gW10sXG4gICAgICAgICAgY2FzZUluc2Vuc2l0aXZlID0gW10sXG4gICAgICAgICAgaXRlbTtcblxuICAgICAgd2hpbGUgKGl0ZW0gPSBpdGVtcy5zaGlmdCgpKSB7XG4gICAgICAgIHZhciBpdCA9IHRoaXMuZGlzcGxheVRleHQoaXRlbSk7XG4gICAgICAgIGlmICghaXQudG9Mb3dlckNhc2UoKS5pbmRleE9mKHRoaXMucXVlcnkudG9Mb3dlckNhc2UoKSkpIGJlZ2luc3dpdGgucHVzaChpdGVtKTtlbHNlIGlmICh+aXQuaW5kZXhPZih0aGlzLnF1ZXJ5KSkgY2FzZVNlbnNpdGl2ZS5wdXNoKGl0ZW0pO2Vsc2UgY2FzZUluc2Vuc2l0aXZlLnB1c2goaXRlbSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBiZWdpbnN3aXRoLmNvbmNhdChjYXNlU2Vuc2l0aXZlLCBjYXNlSW5zZW5zaXRpdmUpO1xuICAgIH0sXG5cbiAgICBoaWdobGlnaHRlcjogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBodG1sID0gJCgnPGRpdj48L2Rpdj4nKTtcbiAgICAgIHZhciBxdWVyeSA9IHRoaXMucXVlcnk7XG4gICAgICB2YXIgaSA9IGl0ZW0udG9Mb3dlckNhc2UoKS5pbmRleE9mKHF1ZXJ5LnRvTG93ZXJDYXNlKCkpO1xuICAgICAgdmFyIGxlbiwgbGVmdFBhcnQsIG1pZGRsZVBhcnQsIHJpZ2h0UGFydCwgc3Ryb25nO1xuICAgICAgbGVuID0gcXVlcnkubGVuZ3RoO1xuICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaHRtbC50ZXh0KGl0ZW0pLmh0bWwoKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChpID4gLTEpIHtcbiAgICAgICAgbGVmdFBhcnQgPSBpdGVtLnN1YnN0cigwLCBpKTtcbiAgICAgICAgbWlkZGxlUGFydCA9IGl0ZW0uc3Vic3RyKGksIGxlbik7XG4gICAgICAgIHJpZ2h0UGFydCA9IGl0ZW0uc3Vic3RyKGkgKyBsZW4pO1xuICAgICAgICBzdHJvbmcgPSAkKCc8c3Ryb25nPjwvc3Ryb25nPicpLnRleHQobWlkZGxlUGFydCk7XG4gICAgICAgIGh0bWwuYXBwZW5kKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGxlZnRQYXJ0KSkuYXBwZW5kKHN0cm9uZyk7XG4gICAgICAgIGl0ZW0gPSByaWdodFBhcnQ7XG4gICAgICAgIGkgPSBpdGVtLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihxdWVyeS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBodG1sLmFwcGVuZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShpdGVtKSkuaHRtbCgpO1xuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uIChpdGVtcykge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGFjdGl2ZUZvdW5kID0gZmFsc2U7XG4gICAgICBpdGVtcyA9ICQoaXRlbXMpLm1hcChmdW5jdGlvbiAoaSwgaXRlbSkge1xuICAgICAgICB2YXIgdGV4dCA9IHNlbGYuZGlzcGxheVRleHQoaXRlbSk7XG4gICAgICAgIGkgPSAkKHRoYXQub3B0aW9ucy5pdGVtKS5kYXRhKCd2YWx1ZScsIGl0ZW0pO1xuICAgICAgICBpLmZpbmQoJ2EnKS5odG1sKHRoYXQuaGlnaGxpZ2h0ZXIodGV4dCkpO1xuICAgICAgICBpZiAodGV4dCA9PSBzZWxmLiRlbGVtZW50LnZhbCgpKSB7XG4gICAgICAgICAgaS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgc2VsZi4kZWxlbWVudC5kYXRhKCdhY3RpdmUnLCBpdGVtKTtcbiAgICAgICAgICBhY3RpdmVGb3VuZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlbMF07XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMuYXV0b1NlbGVjdCAmJiAhYWN0aXZlRm91bmQpIHtcbiAgICAgICAgaXRlbXMuZmlyc3QoKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuZGF0YSgnYWN0aXZlJywgaXRlbXMuZmlyc3QoKS5kYXRhKCd2YWx1ZScpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuJG1lbnUuaHRtbChpdGVtcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgZGlzcGxheVRleHQ6IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGl0ZW0gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBpdGVtLm5hbWUgIT0gJ3VuZGVmaW5lZCcgJiYgaXRlbS5uYW1lIHx8IGl0ZW07XG4gICAgfSxcblxuICAgIG5leHQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGFjdGl2ZSA9IHRoaXMuJG1lbnUuZmluZCgnLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKSxcbiAgICAgICAgICBuZXh0ID0gYWN0aXZlLm5leHQoKTtcblxuICAgICAgaWYgKCFuZXh0Lmxlbmd0aCkge1xuICAgICAgICBuZXh0ID0gJCh0aGlzLiRtZW51LmZpbmQoJ2xpJylbMF0pO1xuICAgICAgfVxuXG4gICAgICBuZXh0LmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICB9LFxuXG4gICAgcHJldjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgYWN0aXZlID0gdGhpcy4kbWVudS5maW5kKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpLFxuICAgICAgICAgIHByZXYgPSBhY3RpdmUucHJldigpO1xuXG4gICAgICBpZiAoIXByZXYubGVuZ3RoKSB7XG4gICAgICAgIHByZXYgPSB0aGlzLiRtZW51LmZpbmQoJ2xpJykubGFzdCgpO1xuICAgICAgfVxuXG4gICAgICBwcmV2LmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICB9LFxuXG4gICAgbGlzdGVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdmb2N1cycsICQucHJveHkodGhpcy5mb2N1cywgdGhpcykpLm9uKCdibHVyJywgJC5wcm94eSh0aGlzLmJsdXIsIHRoaXMpKS5vbigna2V5cHJlc3MnLCAkLnByb3h5KHRoaXMua2V5cHJlc3MsIHRoaXMpKS5vbigna2V5dXAnLCAkLnByb3h5KHRoaXMua2V5dXAsIHRoaXMpKTtcblxuICAgICAgaWYgKHRoaXMuZXZlbnRTdXBwb3J0ZWQoJ2tleWRvd24nKSkge1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKCdrZXlkb3duJywgJC5wcm94eSh0aGlzLmtleWRvd24sIHRoaXMpKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kbWVudS5vbignY2xpY2snLCAkLnByb3h5KHRoaXMuY2xpY2ssIHRoaXMpKS5vbignbW91c2VlbnRlcicsICdsaScsICQucHJveHkodGhpcy5tb3VzZWVudGVyLCB0aGlzKSkub24oJ21vdXNlbGVhdmUnLCAnbGknLCAkLnByb3h5KHRoaXMubW91c2VsZWF2ZSwgdGhpcykpO1xuICAgIH0sXG5cbiAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmRhdGEoJ3R5cGVhaGVhZCcsIG51bGwpO1xuICAgICAgdGhpcy4kZWxlbWVudC5kYXRhKCdhY3RpdmUnLCBudWxsKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdmb2N1cycpLm9mZignYmx1cicpLm9mZigna2V5cHJlc3MnKS5vZmYoJ2tleXVwJyk7XG5cbiAgICAgIGlmICh0aGlzLmV2ZW50U3VwcG9ydGVkKCdrZXlkb3duJykpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ2tleWRvd24nKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kbWVudS5yZW1vdmUoKTtcbiAgICB9LFxuXG4gICAgZXZlbnRTdXBwb3J0ZWQ6IGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgIHZhciBpc1N1cHBvcnRlZCA9IGV2ZW50TmFtZSBpbiB0aGlzLiRlbGVtZW50O1xuICAgICAgaWYgKCFpc1N1cHBvcnRlZCkge1xuICAgICAgICB0aGlzLiRlbGVtZW50LnNldEF0dHJpYnV0ZShldmVudE5hbWUsICdyZXR1cm47Jyk7XG4gICAgICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIHRoaXMuJGVsZW1lbnRbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1N1cHBvcnRlZDtcbiAgICB9LFxuXG4gICAgbW92ZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmICghdGhpcy5zaG93bikgcmV0dXJuO1xuXG4gICAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgICAgICBjYXNlIDk6IC8vIHRhYlxuICAgICAgICBjYXNlIDEzOiAvLyBlbnRlclxuICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgIC8vIGVzY2FwZVxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgIC8vIHVwIGFycm93XG4gICAgICAgICAgLy8gd2l0aCB0aGUgc2hpZnRLZXkgKHRoaXMgaXMgYWN0dWFsbHkgdGhlIGxlZnQgcGFyZW50aGVzaXMpXG4gICAgICAgICAgaWYgKGUuc2hpZnRLZXkpIHJldHVybjtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGhpcy5wcmV2KCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAvLyBkb3duIGFycm93XG4gICAgICAgICAgLy8gd2l0aCB0aGUgc2hpZnRLZXkgKHRoaXMgaXMgYWN0dWFsbHkgdGhlIHJpZ2h0IHBhcmVudGhlc2lzKVxuICAgICAgICAgIGlmIChlLnNoaWZ0S2V5KSByZXR1cm47XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBrZXlkb3duOiBmdW5jdGlvbiAoZSkge1xuICAgICAgdGhpcy5zdXBwcmVzc0tleVByZXNzUmVwZWF0ID0gfiQuaW5BcnJheShlLmtleUNvZGUsIFs0MCwgMzgsIDksIDEzLCAyN10pO1xuICAgICAgaWYgKCF0aGlzLnNob3duICYmIGUua2V5Q29kZSA9PSA0MCkge1xuICAgICAgICB0aGlzLmxvb2t1cCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5tb3ZlKGUpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBrZXlwcmVzczogZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmICh0aGlzLnN1cHByZXNzS2V5UHJlc3NSZXBlYXQpIHJldHVybjtcbiAgICAgIHRoaXMubW92ZShlKTtcbiAgICB9LFxuXG4gICAga2V5dXA6IGZ1bmN0aW9uIChlKSB7XG4gICAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgICAgICBjYXNlIDQwOiAvLyBkb3duIGFycm93XG4gICAgICAgIGNhc2UgMzg6IC8vIHVwIGFycm93XG4gICAgICAgIGNhc2UgMTY6IC8vIHNoaWZ0XG4gICAgICAgIGNhc2UgMTc6IC8vIGN0cmxcbiAgICAgICAgY2FzZSAxODpcbiAgICAgICAgICAvLyBhbHRcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDk6IC8vIHRhYlxuICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgIC8vIGVudGVyXG4gICAgICAgICAgaWYgKCF0aGlzLnNob3duKSByZXR1cm47XG4gICAgICAgICAgdGhpcy5zZWxlY3QoKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgIC8vIGVzY2FwZVxuICAgICAgICAgIGlmICghdGhpcy5zaG93bikgcmV0dXJuO1xuICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRoaXMubG9va3VwKCk7XG4gICAgICB9XG5cbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9LFxuXG4gICAgZm9jdXM6IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoIXRoaXMuZm9jdXNlZCkge1xuICAgICAgICB0aGlzLmZvY3VzZWQgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dIaW50T25Gb2N1cykge1xuICAgICAgICAgIHRoaXMubG9va3VwKCcnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBibHVyOiBmdW5jdGlvbiAoZSkge1xuICAgICAgdGhpcy5mb2N1c2VkID0gZmFsc2U7XG4gICAgICBpZiAoIXRoaXMubW91c2Vkb3ZlciAmJiB0aGlzLnNob3duKSB0aGlzLmhpZGUoKTtcbiAgICB9LFxuXG4gICAgY2xpY2s6IGZ1bmN0aW9uIChlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLnNlbGVjdCgpO1xuICAgICAgdGhpcy4kZWxlbWVudC5mb2N1cygpO1xuICAgIH0sXG5cbiAgICBtb3VzZWVudGVyOiBmdW5jdGlvbiAoZSkge1xuICAgICAgdGhpcy5tb3VzZWRvdmVyID0gdHJ1ZTtcbiAgICAgIHRoaXMuJG1lbnUuZmluZCgnLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICQoZS5jdXJyZW50VGFyZ2V0KS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgfSxcblxuICAgIG1vdXNlbGVhdmU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICB0aGlzLm1vdXNlZG92ZXIgPSBmYWxzZTtcbiAgICAgIGlmICghdGhpcy5mb2N1c2VkICYmIHRoaXMuc2hvd24pIHRoaXMuaGlkZSgpO1xuICAgIH1cblxuICB9O1xuXG4gIC8qIFRZUEVBSEVBRCBQTFVHSU4gREVGSU5JVElPTlxuICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuICB2YXIgb2xkID0gJC5mbi50eXBlYWhlYWQ7XG5cbiAgJC5mbi50eXBlYWhlYWQgPSBmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgdmFyIGFyZyA9IGFyZ3VtZW50cztcbiAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJyAmJiBvcHRpb24gPT0gJ2dldEFjdGl2ZScpIHtcbiAgICAgIHJldHVybiB0aGlzLmRhdGEoJ2FjdGl2ZScpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksXG4gICAgICAgICAgZGF0YSA9ICR0aGlzLmRhdGEoJ3R5cGVhaGVhZCcpLFxuICAgICAgICAgIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbjtcbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgndHlwZWFoZWFkJywgZGF0YSA9IG5ldyBUeXBlYWhlYWQodGhpcywgb3B0aW9ucykpO1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKGFyZy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgZGF0YVtvcHRpb25dLmFwcGx5KGRhdGEsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZywgMSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGFbb3B0aW9uXSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgJC5mbi50eXBlYWhlYWQuZGVmYXVsdHMgPSB7XG4gICAgc291cmNlOiBbXSxcbiAgICBpdGVtczogOCxcbiAgICBtZW51OiAnPHVsIGNsYXNzPVwidHlwZWFoZWFkIGRyb3Bkb3duLW1lbnVcIiByb2xlPVwibGlzdGJveFwiPjwvdWw+JyxcbiAgICBpdGVtOiAnPGxpPjxhIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIGhyZWY9XCIjXCIgcm9sZT1cIm9wdGlvblwiPjwvYT48L2xpPicsXG4gICAgbWluTGVuZ3RoOiAxLFxuICAgIHNjcm9sbEhlaWdodDogMCxcbiAgICBhdXRvU2VsZWN0OiB0cnVlLFxuICAgIGFmdGVyU2VsZWN0OiAkLm5vb3AsXG4gICAgYWRkSXRlbTogZmFsc2UsXG4gICAgZGVsYXk6IDBcbiAgfTtcblxuICAkLmZuLnR5cGVhaGVhZC5Db25zdHJ1Y3RvciA9IFR5cGVhaGVhZDtcblxuICAvKiBUWVBFQUhFQUQgTk8gQ09ORkxJQ1RcbiAgICogPT09PT09PT09PT09PT09PT09PSAqL1xuXG4gICQuZm4udHlwZWFoZWFkLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi50eXBlYWhlYWQgPSBvbGQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyogVFlQRUFIRUFEIERBVEEtQVBJXG4gICAqID09PT09PT09PT09PT09PT09PSAqL1xuXG4gICQoZG9jdW1lbnQpLm9uKCdmb2N1cy50eXBlYWhlYWQuZGF0YS1hcGknLCAnW2RhdGEtcHJvdmlkZT1cInR5cGVhaGVhZFwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICBpZiAoJHRoaXMuZGF0YSgndHlwZWFoZWFkJykpIHJldHVybjtcbiAgICAkdGhpcy50eXBlYWhlYWQoJHRoaXMuZGF0YSgpKTtcbiAgfSk7XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9qcy9jb21wb25lbnRzL3R5cGVhaGVhZC9ib290c3RyYXAzLXR5cGVhaGVhZC5qc1xuLy8gbW9kdWxlIGlkID0gMTQwXG4vLyBtb2R1bGUgY2h1bmtzID0gMjEiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");
}});